# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mafia_pb2 as mafia__pb2


class MafiaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConnectToServer = channel.unary_unary(
                '/Mafia/ConnectToServer',
                request_serializer=mafia__pb2.ConnectToServerMessage.SerializeToString,
                response_deserializer=mafia__pb2.EmptyServerResponse.FromString,
                )
        self.DisconnectFromServer = channel.unary_unary(
                '/Mafia/DisconnectFromServer',
                request_serializer=mafia__pb2.DisconnectFromServerMessage.SerializeToString,
                response_deserializer=mafia__pb2.EmptyServerResponse.FromString,
                )
        self.GetConnectedUsers = channel.unary_unary(
                '/Mafia/GetConnectedUsers',
                request_serializer=mafia__pb2.GetConnectedUsersMessage.SerializeToString,
                response_deserializer=mafia__pb2.GetConnectedUsersResponse.FromString,
                )
        self.GetNewMessage = channel.unary_unary(
                '/Mafia/GetNewMessage',
                request_serializer=mafia__pb2.GetMessageRequest.SerializeToString,
                response_deserializer=mafia__pb2.GetMessageResponse.FromString,
                )
        self.SendUserCommand = channel.unary_unary(
                '/Mafia/SendUserCommand',
                request_serializer=mafia__pb2.SendUserCommandRequest.SerializeToString,
                response_deserializer=mafia__pb2.EmptyServerResponse.FromString,
                )


class MafiaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConnectToServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisconnectFromServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnectedUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNewMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendUserCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MafiaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConnectToServer': grpc.unary_unary_rpc_method_handler(
                    servicer.ConnectToServer,
                    request_deserializer=mafia__pb2.ConnectToServerMessage.FromString,
                    response_serializer=mafia__pb2.EmptyServerResponse.SerializeToString,
            ),
            'DisconnectFromServer': grpc.unary_unary_rpc_method_handler(
                    servicer.DisconnectFromServer,
                    request_deserializer=mafia__pb2.DisconnectFromServerMessage.FromString,
                    response_serializer=mafia__pb2.EmptyServerResponse.SerializeToString,
            ),
            'GetConnectedUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectedUsers,
                    request_deserializer=mafia__pb2.GetConnectedUsersMessage.FromString,
                    response_serializer=mafia__pb2.GetConnectedUsersResponse.SerializeToString,
            ),
            'GetNewMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNewMessage,
                    request_deserializer=mafia__pb2.GetMessageRequest.FromString,
                    response_serializer=mafia__pb2.GetMessageResponse.SerializeToString,
            ),
            'SendUserCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SendUserCommand,
                    request_deserializer=mafia__pb2.SendUserCommandRequest.FromString,
                    response_serializer=mafia__pb2.EmptyServerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Mafia', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mafia(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConnectToServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/ConnectToServer',
            mafia__pb2.ConnectToServerMessage.SerializeToString,
            mafia__pb2.EmptyServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisconnectFromServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/DisconnectFromServer',
            mafia__pb2.DisconnectFromServerMessage.SerializeToString,
            mafia__pb2.EmptyServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConnectedUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/GetConnectedUsers',
            mafia__pb2.GetConnectedUsersMessage.SerializeToString,
            mafia__pb2.GetConnectedUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNewMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/GetNewMessage',
            mafia__pb2.GetMessageRequest.SerializeToString,
            mafia__pb2.GetMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendUserCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Mafia/SendUserCommand',
            mafia__pb2.SendUserCommandRequest.SerializeToString,
            mafia__pb2.EmptyServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
